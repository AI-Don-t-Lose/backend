// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id         String    @id @default(uuid()) @db.Uuid
  sequence   Int       @default(autoincrement())
  externalId String    @map("external_id") @db.VarChar(255)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz()

  recommendations Recommendation[]
  consumption     Consumption[]
  Stat            Stat[]

  @@map("auth")
}

model Recommendation {
  id            String    @id @default(uuid()) @db.Uuid
  sequence      Int       @default(autoincrement())
  stockName     String    @map("stock_name") @db.VarChar(255)
  userId        String    @map("user_id") @db.Uuid
  recommendedAt DateTime? @map("recommended_at") @db.Timestamptz()
  score         Float?    @db.DoublePrecision
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user Auth @relation(fields: [userId], references: [id])

  @@map("recommendations")
}

model Category {
  id           String   @id @default(uuid()) @db.Uuid
  categoryName String   @map("category_name") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Store Store?
  Stat  Stat[]

  @@map("categories")
}

model Store {
  id         String   @id @default(uuid()) @db.Uuid
  storeName  String   @map("store_name") @db.VarChar(255)
  categoryId String?  @unique @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  category    Category?     @relation(fields: [categoryId], references: [id])
  consumption Consumption[]

  @@map("stores")
}

model Consumption {
  id           String   @id @default(uuid()) @db.Uuid
  purchaseTime DateTime @map("purchase_time") @db.Timestamptz()
  amount       Int      @map("amount") @db.Integer
  storeId      String   @map("store_id") @db.Uuid
  authId       String   @map("auth_id") @db.Uuid

  store Store @relation(fields: [storeId], references: [id])
  auth  Auth  @relation(fields: [authId], references: [id])

  @@map("consumptions")
}

model Stat {
  id                   String   @id @default(uuid()) @db.Uuid
  authId               String   @map("auth_id") @db.Uuid
  categoryId           String   @map("category_id") @db.Uuid
  consumptionYearMonth DateTime @map("consumption_year_month") @db.Timestamptz()
  percentage           Float    @map("percentage") @db.DoublePrecision

  auth     Auth     @relation(fields: [authId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("stats")
}
