name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    environment: CI

    env:
      DATABASE_URL: postgresql://app:password@localhost:15432/test
      NODE_ENV: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check migration SQL timestamp order
        run: |
          set -e

          # Get the base branch name
          BASE_BRANCH="${{ github.base_ref }}"
          if [ -z "$BASE_BRANCH" ]; then
            BASE_BRANCH="${{ github.ref_name }}"
          fi

          # Get the base branch's latest migration timestamp
          git fetch origin "$BASE_BRANCH":"origin/$BASE_BRANCH"
          BASE_FILES=$(git ls-tree -r origin/$BASE_BRANCH --name-only | grep '^prisma/migrations/.*\.sql$' || true)
          BASE_MAX=$(echo "$BASE_FILES" | grep -oE '[0-9]{14}' | sort -n | tail -1)

          # Get the new migration files added in this branch
          ADDED_FILES=$(git diff --diff-filter=A --name-only origin/$BASE_BRANCH...HEAD | grep '^prisma/migrations/.*\.sql$' || true)
          if [ -z "$ADDED_FILES" ]; then
            echo "No new migration files added."
            exit 0
          fi

          # Check if the new migration files have a later timestamp than the base branch's latest migration timestamp
          IS_VALID=1
          for f in $ADDED_FILES; do
            TS=$(echo "$f" | grep -oE '[0-9]{12,}')
            if [ -z "$TS" ]; then
              IS_VALID=0
            elif [ "$TS" -le "$BASE_MAX" ]; then
              IS_VALID=0
            fi
          done

          if [ "$IS_VALID" -eq 0 ]; then
            echo "Migration timestamp check failed."
            exit 1
          fi

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint & Format Check
        run: |
          pnpm lint
          pnpm format:check

      - name: Type Check
        run: pnpm typecheck

      - name: Start Database
        run: docker compose up -d testdb

      - name: Wait for Database
        run: |
          timeout 60 sh -c 'until docker compose exec testdb pg_isready -U app -d test; do
            echo "‚è≥ Waiting for PostgreSQL..."
            sleep 2
          done'
          echo "‚úÖ PostgreSQL is ready"

      - name: Setup Database
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy

      - name: Build Application
        run: pnpm build

      - name: Run Tests
        run: pnpm test

      - name: Docker Build Test
        run: |
          echo "üê≥ Building Docker image..."
          docker build -t aidl-backend .
          echo "‚úÖ Docker image built successfully"

      - name: Cleanup
        if: always()
        run: docker compose down -v
